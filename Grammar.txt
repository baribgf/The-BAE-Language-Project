PROGRAM -> STMNT PROGRAM
         | newline PROGRAM
         | EOF

STMNT    -> ASSIGN
         | FUNCALL
         | IO

ASSIGN  -> ident = ASSIGN'

ASSIGN' -> EXPR
         | FUNDEF

EXPR    -> EXPR' EXPR''

EXPR'   -> FUNCALL
         | ( EXPR )
         | not EXPR'
         | ident
         | bit

EXPR''  -> or EXPR
         | and EXPR
         | e

FUNCALL -> ident ( ARGS )

ARGS    -> EXPR ARGS'
         | e

ARGS'   -> , EXPR ARGS'
         | e

FUNDEF  -> < PARAMS > { INNER_PROG }

PARAMS  -> ident PARAMS'
         | e

PARAMS' -> , ident PARAMS'
         | e

INNER_PROG -> STMNT INNER_PROG
            | newline INNER_PROG
            | e

IO      -> input ident
         | output EXPR
